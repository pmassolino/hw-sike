; This program is to test ECC scalar multiplication
; Constants positions
prime:0
prime_plus_one:1
prime_line:2
prime2:3
const_r:4
const_r2:5
const_1:6
ecc_prime_size:49569
; Program itself
;
fin                                                                ; 0
test_ecc_scalar_mul: call ecc_scalar_mul                           ;
fin                                                                ;
;
; ECC scalar multiplication                                        ;
;
; curve scalar     = tmpf0
; curve point x    = tmpf1
; curve point y    = tmpf2
; curve point z    = tmpf3
; curve scalar max = b250
; ecc_const_a      = tmpf4
; ecc_const_a2     = tmpf5
; ecc_const_b3     = tmpf6
;
;
; r0x              = var0
; r0y              = var1
; r0z              = var2
;
; r1x              = var3
; r1y              = var4
; r1z              = var5
;
; t0               = tmpf10
; t1               = tmpf11
; t2               = tmpf12
; t3               = tmpf13
; t4               = tmpf14
; t5               = tmpf15
; t6               = tmpf16
; t7               = tmpf17
; t8               = tmpf18
; t9               = tmpf19
; t10              = tmpf20
; t11              = tmpf21
; t12              = tmpf22
; t13              = tmpf23
; t14              = tmpf24
; t15              = tmpf25
; t16              = tmpf26
; t17              = tmpf27
; t18              = tmpf28
; t19              = tmpf29
; t20              = tmpf30
; t21              = tmpf31
; t22              = tmpf32
; t23              = tmpf33
; t24              = tmpf34
; t25              = tmpf35
; t26              = tmpf36
; t27              = tmpf37
;
ecc_scalar_mul: mmulm var3 tmpf1 const_r2 var4 tmpf2 const_r2 var5 tmpf3 const_r2 ;
lconstm var0 #0                                                    ;
copym var2 var0                                                    ;
copym var1 const_r                                                 ;
badd rd3 b250 #15                                                  ; (scalar_max+15)/16
bshiftr rd3 rd3 #4                                                 ;
badd rd1 rd3 #tmpf0.0.0                                            ; last scalar word
bsub rd1 rd1 #1                                                    ;
copy rd4 #var0                                                     ;
copy rd5 #var3                                                     ;
copy rd6 #var1                                                     ;
copy rd7 #var4                                                     ;
copy rd8 #var2                                                     ;
copy rd9 #var5                                                     ;
ecc_scalar_mul_loop1: copy rd2 #16                                 ;
copy rd0 *rd1                                                      ;
; Point Addition
;
; Step 1
;
; t0 := X1+Y1
; t1 := X2+Y2
; t2 := Y1+Z1
; t3 := Y2+Z2
ecc_scalar_mul_loop2: madd_subd tmpf10 var0 + var1 tmpf11 var3 + var4 tmpf12 var1 + var2 tmpf13 var4 + var5
;
; t4 := X1+Z1
; t5 := X2+Z2
madd_subd tmpf14 var0 + var2 tmpf15 var3 + var5
;
; Step 2
;
; t6  := t0*t1
; t7  := t2*t3
; t8  := t4*t5
; t9  := X1*X2
; t10 := Y1*Y2
; t11 := Z1*Z2
mmulm tmpf16 tmpf10 tmpf11 tmpf17 tmpf12 tmpf13 tmpf18 tmpf14 tmpf15 tmpf19 var0 var3 tmpf20 var1 var4 tmpf21 var2 var5
;
; Step 3
;
; t3 := t6-t9
; t4 := t7-t10
; t5 := t8-t11
madd_subd tmpf13 tmpf16 - tmpf19 tmpf14 tmpf17 - tmpf20 tmpf15 tmpf18 - tmpf21
;
; Step 4
;
; t0 := t3-t10
; t1 := t4-t11
; t2 := t5-t9
madd_subd tmpf10 tmpf13 - tmpf20 tmpf11 tmpf14 - tmpf21 tmpf12 tmpf15 - tmpf19
;
; Step 5
;
; t3 := b3*t11
; t4 := a*t11
; t5 := a*t2
; t6 := b3*t2
; t7 := a*t9
; t8 := a^2*t11
mmulm tmpf13 tmpf6 tmpf21 tmpf14 tmpf4 tmpf21 tmpf15 tmpf4 tmpf12 tmpf16 tmpf6 tmpf12 tmpf17 tmpf4 tmpf19 tmpf18 tmpf5 tmpf21
;
; Step 6
;
; t2  := t3+t5
; t11 := t9+t4
; t12 := t9+t9
; t13 := t6+t7
madd_subd tmpf12 tmpf13 + tmpf15 tmpf21 tmpf19 + tmpf14 tmpf22 tmpf19 + tmpf19 tmpf23 tmpf16 + tmpf17
;
; Step 7
;
; t3 := t13-t8
; t4 := t12+t11
; t5 := t10-t2
; t6 := t10+t2
madd_subd tmpf13 tmpf23 - tmpf18 tmpf14 tmpf22 + tmpf21 tmpf15 tmpf20 - tmpf12 tmpf16 tmpf20 + tmpf12
;
; Step 8
;
; t2 := t0*t5
; t7 := t0*t4
; t8 := t1*t3
; t9 := t4*t3
; t10 := t6*t5
; t11 := t1*t6
mmulm tmpf12 tmpf10 tmpf15 tmpf17 tmpf10 tmpf14 tmpf18 tmpf11 tmpf13 tmpf19 tmpf14 tmpf13 tmpf20 tmpf16 tmpf15 tmpf21 tmpf11 tmpf16
;
; Step 9
;
; X3 := t2-t8
; Y3 := t10+t9
; Z3 := t11+t7
madd_subd *rm5 tmpf12 - tmpf18 *rm7 tmpf20 + tmpf19 *rm9 tmpf21 + tmpf17
;
;
;
; Point Doubling with Addition
;
; Step 1
;
; t14 := X1+Y1
; t15 := X2+Y2
; t16 := Y1+Z1
; t17 := Y2+Z2
madd_subd tmpf24 *rm4 + *rm6 tmpf25 *rm4 + *rm6 tmpf26 *rm6 + *rm8 tmpf27 *rm6 + *rm8
;
; t18 := X1+Z1
; t19 := X2+Z2
madd_subd tmpf28 *rm4 + *rm8 tmpf29 *rm4 + *rm8
;
; Step 2
;
; t20 := t14*t15
; t21 := t16*t17
; t22 := t18*t19
; t23 := X1*X2
; t24 := Y1*Y2
; t25 := Z1*Z2
mmulm tmpf30 tmpf24 tmpf25 tmpf31 tmpf26 tmpf27 tmpf32 tmpf28 tmpf29 tmpf33 *rm4 *rm4 tmpf34 *rm6 *rm6 tmpf35 *rm8 *rm8
;
; Step 3
;
; t17 := t20-t23
; t18 := t21-t24
; t19 := t22-t25
madd_subd tmpf27 tmpf30 - tmpf33 tmpf28 tmpf31 - tmpf34 tmpf29 tmpf32 - tmpf35
;
; Step 4
;
; t14 := t17-t24
; t15 := t18-t25
; t16 := t19-t23
madd_subd tmpf24 tmpf27 - tmpf34 tmpf25 tmpf28 - tmpf35 tmpf26 tmpf29 - tmpf33
;
; Step 5
;
; t17 := b3*t25
; t18 := a*t25
; t19 := a*t16
; t20 := b3*t16
; t21 := a*t23
; t22 := a^2*t25
mmulm tmpf27 tmpf6 tmpf35 tmpf28 tmpf4 tmpf35 tmpf29 tmpf4 tmpf26 tmpf30 tmpf6 tmpf26 tmpf31 tmpf4 tmpf33 tmpf32 tmpf5 tmpf35
;
; Step 6
;
; t16 := t17+t19
; t25 := t23+t18
; t26 := t23+t23
; t27 := t20+t21
madd_subd tmpf26 tmpf27 + tmpf29 tmpf35 tmpf33 + tmpf28 tmpf36 tmpf33 + tmpf33 tmpf37 tmpf30 + tmpf31
;
; Step 7
;
; t17 := t27-t22
; t18 := t26+t25
; t19 := t24-t16
; t20 := t24+t16
madd_subd tmpf27 tmpf37 - tmpf32 tmpf28 tmpf36 + tmpf35 tmpf29 tmpf34 - tmpf26 tmpf30 tmpf34 + tmpf26
;
; Step 8
;
; t16 := t14*t19
; t21 := t14*t18
; t22 := t15*t17
; t23 := t18*t17
; t24 := t20*t19
; t25 := t15*t20
mmulm tmpf26 tmpf24 tmpf29 tmpf31 tmpf24 tmpf28 tmpf32 tmpf25 tmpf27 tmpf33 tmpf28 tmpf27 tmpf34 tmpf30 tmpf29 tmpf35 tmpf25 tmpf30
;
; Step 9
;
; X3 := t16-t22
; Y3 := t24+t23
; Z3 := t25+t21
madd_subd *rm4 tmpf26 - tmpf32 *rm6 tmpf34 + tmpf33 *rm8 tmpf35 + tmpf31
bshiftl rd0 rd0 #1                                                 ;
bsub rd2 rd2 #1                                                    ;
jumpl ecc_scalar_mul_loop2 #0 rd2                                  ; 
bsub rd3 rd3 #1                                                    ; 
bsub rd1 rd1 #1                                                    ; 
jumpl ecc_scalar_mul_loop1 #0 rd3                                  ; 
copym tmpf0 var2                                                   ;
copym tmpf1 var5                                                   ;
call fp_inv                                                        ;
mmulm tmpf0 tmpf16 var0 tmpf1 tmpf16 var1 tmpf2 tmpf17 var3 tmpf3 tmpf17 var4
mmulm tmpf10 tmpf0 const_1 tmpf11 tmpf1 const_1 tmpf12 tmpf2 const_1 tmpf13 tmpf3 const_1
mitred tmpf16 tmpf10 tmpf17 tmpf11 tmpf18 tmpf12 tmpf19 tmpf13     ;
ret                                                                ;
;
;
;
; Field inversion
; Input value to be inverted tmpf0, tmpf1
; Output value to be inverted tmpf16, tmpf17
fp_inv: copym tmpf24 const_r                                       ; 
copym tmpf25 tmpf0                                                 ; 
copym tmpf28 const_r                                               ; 
copym tmpf29 tmpf1                                                 ; 
copy rd3 roperands                                                 ; 
bsmul rd3 rd3 #16                                                  ; 
badd rd3 rd3 #15                                                   ; Position where the MSB prime is.
copy rd4 #tmpf33                                                   ; Prime - 2, base address.(tmpf33 == m53)
bsmul rd4 rd4 #64                                                  ; Multiply 64 to be accessible by the base alu.
badd rd3 rd3 rd4                                                   ;
lconstm tmpf32 #2                                                  ; 
madd_subd tmpf33 prime - tmpf32                                    ; 
copy rd1 roperands                                                 ; 
badd rd1 rd1 #1                                                    ; 
bsmul rd1 rd1 #16                                                  ; 
bsmul rd5 rd1 #16                                                  ; rd5 has the maximum number of bits the prime could have.
copy rd4 ecc_prime_size                                           ; rd4 has the current number of bits.
badd rd4 rd4 #16                                                   ; 
jumpeql fp_inv_loop5 rd5 rd4                                       ; remove unnecessary 0's from the most significant part.
fp_inv_loop4: badd rd4 rd4 #16                                     ; Only remove words multiple of 16.
bsub rd1 rd1 #1                                                    ; It would be possible to remove until detect a bit 1, maybe in the future.
bsub rd3 rd3 #1                                                    ; 
jumpl fp_inv_loop4 rd4 rd5                                         ; 
fp_inv_loop5: copy rd4 #tmpf24                                     ; tmpf24 = m44
copy rd5 #tmpf25                                                   ; tmpf25 = m45
copy rd6 #tmpf28                                                   ; tmpf28 = m48
copy rd7 #tmpf29                                                   ; tmpf29 = m49
copy rd8 #tmpf26                                                   ; tmpf26 = m46 <=> m44
copy rd9 #tmpf27                                                   ; tmpf27 = m47 <=> m45
copy rd10 #tmpf30                                                  ; tmpf30 = m50 <=> m48
copy rd11 #tmpf31                                                  ; tmpf31 = m51 <=> m49
fp_inv_loop1: copy rd2 #16                                         ; 
copy scalar *rd3                                                   ;
fp_inv_loop2: mmulm tmpf27 tmpf25 *rm4 tmpf26 tmpf24 *rm4 tmpf31 tmpf29 *rm6 tmpf30 tmpf28 *rm6
bshiftl scalar scalar #1                                           ;
mmulm tmpf25 tmpf27 *rm8 tmpf24 tmpf26 *rm8 tmpf29 tmpf31 *rm10 tmpf28 tmpf30 *rm10
bshiftl scalar scalar #1                                           ;
bsub rd2 rd2 #2                                                    ;
jumpl fp_inv_loop2 #0 rd2                                          ; 
bsub rd3 rd3 #1                                                    ; 
bsub rd1 rd1 #1                                                    ; 
jumpl fp_inv_loop1 #0 rd1                                          ; 
copym tmpf16 tmpf24                                                ; 
copym tmpf17 tmpf28                                                ; 
ret                                                                ; 
;